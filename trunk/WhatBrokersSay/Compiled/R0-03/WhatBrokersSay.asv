classdef WhatBrokersSay
    %TODO: Column visiblity pulldown.
    %TODO: E-mail alerts
    %TODO: 3. Get current price
    %TODO: Download and decode "what brokers say" ShareCrazy
    %TODO: Improve filtering capability
    %
    %Rev Notes:
    %    0.03
    properties
        SelectedArray
        TableArray
        UpdateRate = 60*3; % Seconds
        URL1 = 'http://www.digitallook.com/dlmedia/investing/uk_shares/broker_ratings.cgi?&story_category_id=0212&ac=212437&username=bryantaylor&action=broker_ratings&orderby_field=date&selected_menu_link=/dlmedia/investing/uk_shares/broker_views&limitstart=0'
        URL2 = 'http://www.digitallook.com/dlmedia/investing/uk_shares/broker_ratings.cgi?&story_category_id=0212&ac=212437&username=bryantaylor&action=broker_ratings&orderby_field=date&selected_menu_link=/dlmedia/investing/uk_shares/broker_views&limitstart=50'
        URL3 = 'http://www.digitallook.com/dlmedia/investing/uk_shares/broker_ratings.cgi?&story_category_id=0212&ac=212437&username=bryantaylor&action=broker_ratings&orderby_field=date&selected_menu_link=/dlmedia/investing/uk_shares/broker_views&limitstart=100'
        handles
        GUI_Mode = 'User'; %Minimal or Full or User
        DataLocation = 'C:\SourceSafe\Stocks & Shares\Programs\What Brokers Say\Data\'
        InvestedSymbolList = {  'CSLT.L'; ...
                                'IRV.L'; ...
                                'EIL.L'; ...
                                'WKP.L'; ...
                                'FPM.L'; ...
                                'PCF.L'; ...
                                'HAWK.L'}
        Rev = 0.03
        ProgramName = 'What Brokers Say';
        EmailAdd = {'bryan.taylor@talktalk.net'; ...
                    'bryan.taylor@st.com'; ...
                    };
        InstallDir = 'C:\SourceSafe\Stocks & Shares\Programs\What Brokers Say\'
        ColumnNames = {'Date','Company Name','Ticker','Broker name','Recommendation','Price','Old Price Target','New price target','Broker change','Current Price Target','Profit'};
    end
    methods 
        function [obj] = WhatBrokersSay(obj)
            if strcmpi(obj.GUI_Mode,'User')
            obj.GUI_Mode = questdlg( 'Which mode do you want to load into?', ...
                                     'User Question', ...
                                     'Full', 'Minimal','Minimal');
            end
            
            warning off
            if strcmpi(obj.GUI_Mode,'Minimal')
                obj = obj.CreateMinimalGUI; 
            else
                obj = obj.CreateGUI;
            end
            warning on
            
            obj = obj.Sync;
            obj = obj.LoadAllData;
            obj = obj.GetCurrentTargetPrice;
            obj = obj.CalculateProfit;
            obj = obj.GetTodaysEntries;
            obj = obj.GetCurrentTargetPrice;
                        
            obj.handles.timer = timer(  'TimerFcn', @obj.Sync, ...
                                        'Period', obj.UpdateRate, ...
                                        'ExecutionMode', 'fixedDelay'); 
                                    
            set(obj.handles.auto,'ClickedCallback', @obj.Timer);         
            stop(obj.handles.timer)

%            obj = obj.FilterOnInvestmentSymbolsOnly;                  
        end
        function [obj] = Update(varargin)
            obj = varargin{1};
            set(obj.handles.status,'String','Updating');
            drawnow;
            [obj] = obj.UpdateTable;
            [obj] = obj.Filter;
            obj = obj.SaveData;
            set(obj.handles.table,  'Data', obj.SelectedArray(2:end,:), ...
                                    'ColumnName', obj.SelectedArray(1,:));
            set(obj.handles.status,'String','Update Complete');
            drawnow;
        end
        function [obj] = Sync(varargin)
            try
                obj = varargin{1};
                obj = obj.UpdateTable;
                disp('UpdateTable complete')
                obj = obj.SaveData;
            catch
                disp('Error donwloading data: Connection may be down.') 
            end
        end
        function [Data] = DownloadData(obj,URL)
                %% WHAT BROKERS SAY
            disp('Download start')
                time = 1;
                while time <200
                    [s,STATUS] = urlread2(URL);
                    if STATUS == 1
                        break
                    else
                        disp(['Connection problems, Wait: ',num2str(time)])
                        pause(time);
                        time = time*2;
                    end
                end
           disp('Download end')
                %% Remove Table
                n = findstr(s,'<table border="0" cellspacing="0" width="100%" class="dl textRegular">');
                y = findstr(s,'</table>');
                table = s(n:y+8);

                %% Each Row
                start = findstr(table,'<tr>');
                endof = findstr(table,'</tr>');
                [x] = size(start,2);
                Headings = table(start(1):endof(1));
                for i = 2:x
                    ROW{i-1,1} = table(start(i):endof(i));
                end

                %% Each Column
                [x] = size(ROW,1);
                for i = 1:x
                    text = ROW{i,1};

                    %Date
                    StartString = '<td class="dataRegularUlOn dataRegularU1DateCell"><div class=''dataRegularU1DateCell''>';
                    DateStart = findstr(text,StartString);
                    DateEnd = findstr(text,'</div></td>');
                    Date = text(DateStart+size(StartString,2):DateEnd-1);
                    if isempty(Date)
                    StartString = '<td class="dataRegularUlOff dataRegularU1DateCell"><div class=''dataRegularU1DateCell''>';
                    DateStart = findstr(text,StartString);
                    DateEnd = findstr(text,'</div></td>');
                    Date = text(DateStart+size(StartString,2):DateEnd-1);           
                    end
                    Dates{i,1} = Date;

                    %CompanyName
                    StartString = '">';
                    Start = findstr(text,StartString);
                    DateEnd = findstr(text,'</td>');

                    [y] = size(DateEnd,2);
                    for j = 1:y
                        Temp{i,j} = strrep(text(Start(j+1)+2:DateEnd(j)-1),'</a>','');
                    end   
                end
                Temp = Temp(:,2:end);
                for i = 5:7
                Temp(:,i) = num2cell(str2double(strrep(Temp(:,i),'p','')));
                end
                Data = [Dates,Temp];
        end
        function [obj] = UpdateTable(obj)
            try
                disp('download1')
                Data1 = obj.DownloadData(obj.URL1);
                disp('download2')
                Data2 = obj.DownloadData(obj.URL2);
                disp('download3')
                Data3 = obj.DownloadData(obj.URL3);
                disp('download4')
                obj.TableArray = [obj.ColumnNames(1:9);Data1;Data2;Data3];
                if strcmpi(obj.GUI_Mode,'Full')
                set(obj.handles.table,  'Data',         obj.TableArray(2:end,:), ...
                                        'ColumnName',   obj.ColumnNames);
                end
            catch
                disp('Error downloading data')
            end
        end
        function [obj] = GetTodaysEntries(obj)
            n = find(cell2mat(obj.TableArray(2:end,1)) == today);
            obj.SelectedArray = obj.TableArray(n,:);
        end
        function [obj] = GetCurrentTargetPrice(obj)
            OldPriceTarget = cell2mat(obj.TableArray(2:end,7));
            NewPriceTarget = cell2mat(obj.TableArray(2:end,8));
            [x] = size(OldPriceTarget,1);
            for i = 1:x
                if not(isnan(NewPriceTarget(i)))
                    PriceTarget(i,1) = NewPriceTarget(i);
                elseif not(isnan(OldPriceTarget(i)))
                    PriceTarget(i,1) = OldPriceTarget(i);
                else
                    PriceTarget(i,1) = NaN;
                end
            end
            PT = [{'PriceTarget'};num2cell(PriceTarget)];
            obj.TableArray = [obj.TableArray,PT];
        end
        function [obj] = CalculateProfit(obj)
            PriceTarget = cell2mat(obj.TableArray(2:end,10));
            Price = cell2mat(obj.TableArray(2:end,6));
            [x] = size(PriceTarget,1);
            for i = 1:x
                if not(isnan(Price(i)))
                    Profit(i,1) = PriceTarget(i)/Price(i);
                else
                    Profit(i,1) = NaN;
                end
            end
            PT = [{'Profit'};num2cell(Profit)];
            obj.TableArray = [obj.TableArray,PT];
            if strcmpi(obj.GUI_Mode,'Full')
                set(obj.handles.table,  'Data',         obj.TableArray(2:end,1:11), ...
                                        'ColumnName',   obj.ColumnNames);
            end
        end
        function [obj] = CreateMinimalGUI(obj)
            %%
            obj.handles.figure = waitbar(0,['Ready']);
            set(obj.handles.figure, 'Name',[obj.ProgramName,' - Downloader (R',num2str(obj.Rev),')'], ...
                                    'NumberTitle','off');
            
            %Toolbar
            image = imread([obj.InstallDir,'Icons\refresh3.jpg']);
            image = imresize(image,[16,16]);
                                        
            obj.handles.toolbar = uitoolbar(obj.handles.figure);
            obj.handles.refresh = uipushtool(obj.handles.toolbar,'CDATA',image, ...
                                                'TooltipString','Refresh', ...
                                                'ClickedCallback',@obj.Sync);
            
            image = imread([obj.InstallDir,'Icons\ticker2.jpg']);
            image = imresize(image,[16,16]);
            obj.handles.auto = uitoggletool(obj.handles.toolbar,'CDATA',image, ...
                                                'TooltipString','Auto-Updater');
                                                      
            obj.handles.timer = timer('TimerFcn',@obj.Sync, 'Period', obj.UpdateRate,'ExecutionMode','fixedDelay');                               
            set(obj.handles.auto,'ClickedCallback',@obj.Timer);                                            
            
            stop(obj.handles.timer)
        end
        function [obj] = CreateGUI(obj)
            %%
            obj.handles.figure = figure('Toolbar','none',...
                                        'Menubar','none');
            set(obj.handles.figure, 'Name',[obj.ProgramName,' - Analysis (R',num2str(obj.Rev),')'], ...
                                    'NumberTitle','off');
            
            obj.handles.table = uitable( obj.handles.figure, ...
                    'Data', [], ...
                    'ColumnName', []);
                
            set(obj.handles.figure,'ResizeFcn',@obj.Resize);
            
            %Toolbar
            image = imread([obj.InstallDir,'Icons\refresh3.jpg']);
            image = imresize(image,[16,16]);
            
            obj.handles.status = uicontrol( 'Style','text', ...
                                            'Position',[2,2,100000,22], ...
                                            'HorizontalAlignment','left', ...
                                            'String','Ready');
                                        
            obj.handles.toolbar = uitoolbar(obj.handles.figure);
            obj.handles.refresh = uipushtool(obj.handles.toolbar,'CDATA',image, ...
                                                'TooltipString','Refresh', ...
                                                'ClickedCallback',@obj.Update);
            
            image = imread([obj.InstallDir,'Icons\ticker2.jpg']);
            image = imresize(image,[16,16]);
            obj.handles.auto = uitoggletool(obj.handles.toolbar,'CDATA',image, ...
                                                'TooltipString','Auto-Updater');

            image = imread([obj.InstallDir,'Icons\Filter.jpg']);
            image = imresize(image,[16,16]);
            obj.handles.filter = uitoggletool(obj.handles.toolbar,'CDATA',image, ...
                                                'TooltipString','Filter On Invested Symbols');
                                            
            set(obj.handles.auto,'ClickedCallback',@obj.Timer);
            set(obj.handles.filter,'ClickedCallback',@obj.Filter);
                                            
            
%             stop(obj.handles.timer)
        end
        function [obj] = Filter(varargin)
            obj = varargin{1};
            State = get(obj.handles.filter,'State');
            switch State
                case 'on'
                    obj = obj.FilterOnInvestmentSymbolsOnly;
                case 'off'
                    obj = obj.LoadAllData;
                    obj = obj.GetCurrentTargetPrice;
                    obj = obj.CalculateProfit;
                    obj = obj.GetTodaysEntries;
                    obj = obj.GetCurrentTargetPrice;
                    set(obj.handles.table,'Data', obj.TableArray(2:end,1:11))
                otherwise
            end
        end
        function [obj] = Resize(varargin)
            obj = varargin{1};
            Position = get(obj.handles.figure,'position');
            set(obj.handles.table,'Position',[1,25,Position(3),Position(4)-25])
        end
        function [obj] = Timer(varargin)
            obj = varargin{1};
            switch get(obj.handles.auto,'State')
                case 'off'
                    stop(obj.handles.timer)
                case 'on'
                    start(obj.handles.timer)
                otherwise
            end
        end
        function [Data] = GetColumn(obj,ColumnName)
            n = find(strcmpi(obj.TableArray(1,:),ColumnName));
            Data = obj.TableArray(2:end,n);
        end
        function [obj] = SaveData(obj)
           NewEntryCount = 0;
           [Date] = obj.GetColumn('Date');
           [CompanyName] = obj.GetColumn('Company Name');
           [Ticker] = obj.GetColumn('Ticker');
           
           %Days
           DateNumber = datenum(Date);
           MinVal = min(DateNumber);
           MaxVal = max(DateNumber);
           count = 1;
           for i = MinVal:MaxVal
               n = find(i == DateNumber);
               if isempty(n)
               else
                   Dates(count) = i;
                   count = count +1;
               end
           end %Filter to be left with one of each day - Dates
           
           DateStr = datestr(Dates,28);
           DateMonth = str2num(datestr(Dates,5));
           
           %Months
           MinVal = min(DateMonth);
           MaxVal = max(DateMonth);
           count = 1;
           for i = MinVal:MaxVal
               n = find(i == DateMonth);
               if isempty(n)
               else
                   Months(count) = i;
                   count = count +1;
               end
           end %Filter to be left with one of each month.
           
           [x] = size(Months,2);
           DateMonth2 = str2num(datestr(DateNumber,5));
           for i = 1:x %Loop over months and save data
               %Load Previous Data
               n = find(Months(i) == DateMonth);
               DateString = DateStr(1,:); %e.g May2009
               String = [obj.DataLocation,DateString,'.mat'];
               try
                  load(String)
                  NewMonth = false;
               catch
                  NewMonth = true; 
               end
               
               %Get all data from that month
               if  NewMonth == true
                   % Just save the data
                   % Filter all data from this month.
                   n = [1;find(DateMonth2 == Months(i)) + 1];
                   SaveTable = obj.TableArray(n,:);
                   save(String,'SaveTable');
               elseif NewMonth == false
                   % Need to compare data
                   n = [1;find(DateMonth2 == Months(i)) + 1];
                   NewTable = obj.TableArray(n,:);
                   [x] = size(NewTable,1);
                   for i = 2:x %first entry is the header
                       % look for new entries
                       EntryInQuestion = NewTable{i,1};
                       n = find(strcmpi(EntryInQuestion,SaveTable(:,1))); %Matching Dates
                       if isempty(n)
                           NewEntry = true;
                       else %filter for company name
                           FilterTable = SaveTable(n,:);
                           n = find(strcmpi(NewTable{i,2},FilterTable(:,2)));
                           if isempty(n)
                               NewEntry = true;
                           else
                               NewEntry = false;
                           end
                       end
                       if NewEntry == true
                          EntryState{i} = 'NewEntry'; 
                       else
                          EntryState{i} = 'OldEntry'; 
                       end
                   end
                   n = find(strcmpi(EntryState,'NewEntry'));
                   [x] = size(n,2);
                   NewEntryCount = NewEntryCount+x;
                   
                   SaveTable = [SaveTable(1,1:9);NewTable(n,:);SaveTable(2:end,1:9)];
                   save(String,'SaveTable');
               else
               end
           end
           if x>0
              disp([datestr(now),': ',num2str(x),' new entries found: email sent'])
              obj = obj.LoadAllData;
              obj.SendEmail;
           else
              disp([datestr(now),': ',num2str(x),' new entries found: No email sent']) 
           end
        end
        function [obj] = LoadAllData(obj)
            path = pwd;
            cd(obj.DataLocation);
            names = struct2cell(dir);
            Name = names(1,3:end);
            cd(path);
            [x] = size(Name,2);
            if x == 1
                load([obj.DataLocation,Name{1}]);
                set(obj.handles.table,  'Data',         SaveTable(2:end,:), ...
                                        'ColumnName',   obj.ColumnNames);
                set(obj.handles.status, 'String','Update Complete');
            else
                %%
                BuildTable = [];
                for i = 1:x
                   load([obj.DataLocation,Name{i}]);
                   BuildTable = [BuildTable;SaveTable(2:end,1:9)];
                end
                %%
                if strcmpi(obj.GUI_Mode,'Full')
                set(obj.handles.table,  'Data',         BuildTable, ...
                                        'ColumnName',   obj.ColumnNames);
                set(obj.handles.status, 'String','Update Complete');
                end
                obj.TableArray = BuildTable;
            end
            obj.TableArray = BuildTable;
        end
        function [Data] = FindTicker(obj,Ticker)
            n = find(strcmpi(obj.TableArray(:,3),Ticker));
            Table = [obj.TableArray(1,:);obj.TableArray(n,:)];
            set(obj.handles.table,  'Data',         Table(2:end,:), ...
                                    'ColumnName',   obj.ColumnNames);
            set(obj.handles.status, 'String','Update Complete');
            Data = Table(2:end,:);
        end
        function [obj] = FilterOnInvestmentSymbolsOnly(obj)
            obj = obj.LoadAllData;
            obj = obj.GetCurrentTargetPrice;
            obj = obj.CalculateProfit;
            obj = obj.GetTodaysEntries;
            obj = obj.GetCurrentTargetPrice;
            [x] = size(obj.InvestedSymbolList,1);
            BuildData = [];
            for i = 1:x
                Symbol = strrep(obj.InvestedSymbolList{i},'.L','');
                [Data] = obj.FindTicker(Symbol);
                if isempty(Data)
                    
                else
                    BuildData = [BuildData;Data];
                end
            end
            obj.SelectedArray = BuildData;
            set(obj.handles.table,  'Data', BuildData(:,1:11))
        end
        function [obj] = SendEmail(obj)
            %%
            Data = obj.TableArray;
            ColumnNames = obj.ColumnNames;
            
            MinSize = min(size(ColumnNames,2),size(Data,2));
            xlswrite([obj.InstallDir,'Data.xls'],[rot90(ColumnNames(1:MinSize));Data(:,1:MinSize)]);
            disp('Complete')
            %
            setpref('Internet','SMTP_Server','smtp.talktalk.net');
            setpref('Internet','E_mail','bryan.taylor@talktalk.net');
            sendmail(   obj.EmailAdd,[obj.ProgramName,' -',datestr(now)], ...
                        {'Program details: '; ...
                         ['Name: ',obj.ProgramName]; ...
                         ['Rev: ',num2str(obj.Rev)]; ...
                         }, ...
                         {[obj.InstallDir,'Data.xls']});          
        end
    end
end
